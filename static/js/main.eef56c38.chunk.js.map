{"version":3,"sources":["components/Logo/Logo.module.css","components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/Conditions/Conditions.js","components/Forecast/Forecast.js","components/Logo/Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Conditions","props","className","classes","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","Forecast","useState","city","setCity","unit","setUnit","setResponseObj","setError","setLoading","uriEncodedCity","encodeURIComponent","onSubmit","e","preventDefault","length","fetch","then","response","json","Error","catch","err","console","log","message","type","placeholder","maxLength","value","TextInput","onChange","target","Radio","checked","Button","Logo","sky","circle","cloud1","cloud2","cloud3","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eef56c38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"Logo_circle__2ACV3\",\"sky\":\"Logo_sky__3siX9\",\"cloud1\":\"Logo_cloud1__28Qj1\",\"cloud2\":\"Logo_cloud2__2lzsh\",\"cloud3\":\"Logo_cloud3__1HnkX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TextInput\":\"Forecast_TextInput__2ur0J\",\"Radio\":\"Forecast_Radio__1Ejlt\",\"Button\":\"Forecast_Button__3Y_IL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1WUTs\",\"Small\":\"Conditions_Small__1VrqO\",\"Loader\":\"Conditions_Loader__PcSFJ\",\"spin\":\"Conditions_spin__b05Or\"};","import React from 'react';\nimport classes from './Conditions.module.css';\n\nconst Conditions = (props) => {\n  return (\n    <div className={classes.Wrapper}>\n      {props.error && <small className={classes.Small}>Please enter a valid city.</small>}\n      {props.loading && <div className={classes.Loader}>Loading...</div>}\n      {props.responseObj.cod === 200 ?\n      <div>\n        <p><strong>{props.responseObj.name}</strong></p>\n        <p>It is currently {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}.</p>\n      </div>\n      : null\n      }\n    </div>\n  );\n}\n\nexport default Conditions;\n","import React, {useState} from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport classes from './Forecast.module.css'\n\nconst Forecast = () => {\n  let [city, setCity] = useState('');\n  let [unit, setUnit] = useState('imperial');\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    }\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n\n    fetch(`https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, {\n      \"method\": \"GET\",\n      \"headers\": {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"d7a10b8de7msh05426b59fb37317p101a4ejsnfb17fea2349b\"\n      }\n    })\n    .then(response => response.json())\n    .then(response => {\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n      setResponseObj(response)\n      setLoading(false);\n    })\n    .catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    })\n  }\n\n  return (\n    <div>\n      <h2>Find Current Weather Conditions</h2>\n      <form onSubmit={getForecast}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter City\"\n          maxLength=\"50\"\n          value={city}\n          className={classes.TextInput}\n          onChange={(e) => setCity(e.target.value)} />\n        <label className={classes.Radio}>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"imperial\"}\n            value=\"imperial\"\n            onChange={(e) => setUnit(e.target.value)} />\n          Fahrenheit\n        </label>\n        <label className={classes.Radio}>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"metric\"}\n            value=\"metric\"\n            onChange={(e) => setUnit(e.target.value)} />\n          Celcius\n        </label>\n        <button className={classes.Button} type=\"submit\">Get Forecast</button>\n      </form>\n      <Conditions\n        responseObj={responseObj}\n        error={error}\n        loading={loading} />\n    </div>\n  );\n}\n\nexport default Forecast;\n","import React from 'react';\nimport classes from './Logo.module.css';\n\nconst Logo = () => {\n  return (\n    <div className={classes.sky}>\n      <div className={classes.circle} />\n      <div className={classes.cloud1} />\n      <div className={classes.cloud2} />\n      <div className={classes.cloud3} />\n    </div>\n  );\n}\n\nexport default Logo;\n","import React from 'react';\nimport './App.css';\nimport Forecast from './components/Forecast/Forecast';\nimport Logo from './components/Logo/Logo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <h1>React Weather App</h1>\n      </header>\n      <main>\n        <Forecast />\n      </main>\n      <footer>Page created by Ismael Abadin, dedicated to my lovely wife Asma Akhter</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}